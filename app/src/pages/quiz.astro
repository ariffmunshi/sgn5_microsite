---
import LottieAnimation from "astro-integration-lottie/Lottie.astro";
import BaseLayout from "../layouts/BaseLayout.astro";
import QuizQuestion from "../components/QuizQuestion.astro";
import { quizQuestions} from "../questions.js";
import '@fontsource-variable/dm-sans';
---
<!-- This is the initial "start quiz" page content -->
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
<div id="quiz-page-container" class='quiz-container'>
    <div id="quiz-lottie-wrapper" class="lottie-wrapper">
        <LottieAnimation
            src="/lottie/Fruit Basket - Drop and with Facial Expression.json"
            autoplay="visible"
            loop={true} />
    </div>
    <div id="quiz-main-text" class="quiz-text-content">
        <text class="title">6 Eras.1 You</text>
        <br>
        <text class="title">Which era are you from?</text>
         <p class="top-description">
            Singapore has evolved over the years--from the industrious spirit of
            the 60s and 70s, to the pop culture boom of the 90s, to the global
            ambition of the 2000s and beyond. Each era shaped a generation:
            from nation-builders to trendsetters.
        </p>
        <p class="bottom-description">
            So, which era matches your vibe? Take our quiz to find out.
        </p>
    </div>
    <button id="quiz-start-button" class="btn-secondary">
        <text id="quiz-start-btn-text">Let's find out!</text>
    </button>
</div>

<!-- This is the quiz questions area, initially hidden -->
<div id="quiz-questions-area" style="display: none;">
    {quizQuestions.map((question, index) => (
        <div class:list={["quiz-question-wrapper", { hidden: index !== 0 }]} data-question-index={index}>
            <QuizQuestion
                questionNumber={index + 1}
                totalQuestions={quizQuestions.length}
                questionText={question.questionText}
                options={question.options}
                lottieFileUrl={question.lottieFileUrl}
            />
            <!-- 
              IMPORTANT: Ensure your QuizQuestion.astro component renders a 'Next' button
              with the class 'quiz-next-button' for the script below to work.
            -->
        </div>
    ))}
</div>

<style is:global>
    body {
        background-color: #F8EABB;
        background-image: url('/grain_overlay_tile.webp'), url('/Background Texture.webp');
        background-blend-mode: multiply;
        height: 100vh;
        font-family: 'DM Sans Variable';
        color: #333333;
        margin: 0;
        padding: 20px;
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        text-align: center;
    }

@keyframes gradient {
    0% {
        background-position: 0% 50%;
    }
    50% {
        background-position: 100% 50%;
    }
    100% {
        background-position: 0% 50%;
    }
}
    .hidden {
        display: none !important;
    }

    #quiz-page-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 30px;
        max-width: 800px;
        margin: 0 auto;
        padding: 60px;
        text-align: center;
    }

    #quiz-main-text .title {
        color: var(--General-Off-Black, #222);
        text-align: center;
        font-family: "DM Sans Variable";
        font-size: 32px;
        font-style: normal;
        font-weight: 900;
        line-height: 100%; /* 48px */
        letter-spacing: -2.4px;
        width: 350px;
        height: 96px
    }
    #quiz-lottie-wrapper {
        width: 395.386px;
        height: 367px;         
    }

    #quiz-lottie-wrapper lottie-player {
        display: block;
    }

    #quiz-main-text .top-description,
    #quiz-main-text .bottom-description {
        color: var(--General-Off-Black, #222);
        text-align: center;
        font-family: "DM Sans Variable";
        font-size: 16px;
        font-style: normal;
        font-weight: 400;
        line-height: 110%; /* 17.6px */
        letter-spacing: -0.32px;
        align-self: stretch;
        width: 602px;
        height: auto;
    }

    #quiz-start-button {
        border-radius: 12px;
        background: var(--SGN-Brand-Red, #A90911);
        display: flex;
        min-width: 194px;
        padding: 16px 24px;
        justify-content: center;
        align-items: center;
        gap: 8px;
    }


    #quiz-start-button:hover {
        background: #8a0710;
    }
    #quiz-start-btn-text{
        color: var(--General-White, #FFF);
        text-align: center;
        font-family: "DM Sans Variable";
        font-size: 18px;
        font-style: normal;
        font-weight: 700;
        line-height: normal;
        flex: 1 0 0;
    }
    #quiz-next-button{
    border-radius: 12px;
    background: var(--Brand-Brand-Yellow, #FFC803);
    display: flex;
    height: 55px;
    min-width: 194px;
    padding: 16px 24px;
    align-items: flex-end;
    gap: 32px;

  }
  #quiz-next-button:hover{
    color: white;
    

  }
    .quiz-option {
        cursor: pointer;
        transition: all 0.3s ease;
    }


    .quiz-option.selected {
        background-color: #A90911;
        color: white;
        border-color: #A90911;
    }
    .white-transition {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: white;
    opacity: 0;
    pointer-events: none;
    z-index: 9999;
    transition: opacity 1.2s ease-in-out;
}
 /* White out transition overlay */
    #quiz-questions-area {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    width: 100%;
    max-width: 600px; /* Optional: limit max width for better readability */
    margin: 0 auto; /* Center the container itself */
    padding: 20px; /* Optional: add some padding */
    box-sizing: border-box;
}

.white-transition.active {
    opacity: 1;
}
    @media all and (max-width: 500px) {

        #quiz-lottie-wrapper {
        width: 276.77px;
        height: 256.9px;        
    }

    #quiz-lottie-wrapper lottie-player {
        display: block;
    }
    
        #quiz-main-text .top-description,
    #quiz-main-text .bottom-description {
        color: var(--General-Off-Black, #222);
        text-align: center;
        font-family: "DM Sans Variable";
        font-size: 16px;
        font-style: normal;
        font-weight: 400;
        line-height: 110%; /* 17.6px */
        letter-spacing: -0.32px;
        width: 100%;
        height: auto;
    }
    #quiz-start-button {
        border-radius: 10px;
        background: var(--SGN-Brand-Red, #A90911);
        display: flex;
        min-width: 194px;
        padding: 16px 24px;
        justify-content: center;
        align-items: center;
        gap: 8px;
    }
    #quiz-start-btn-text{
        color: var(--General-White, #FFF);
        text-align: center;
        font-family: "DM Sans Variable";
        font-size: 16px;
        font-style: normal;
        font-weight: 700;
        line-height: normal;
        flex: 1 0 0;
    }
    #quiz-next-button{
        gap: 24px
    }

}
</style>

<script>
    import {calculateERAScores, ERAS, questionScores } from "../questions.js";
    document.addEventListener('DOMContentLoaded', () => {
    const startButton = document.getElementById('quiz-start-button');
    const mainPageContainer = document.getElementById('quiz-page-container');
    const questionsArea = document.getElementById('quiz-questions-area');
    const questionWrappers = document.querySelectorAll('.quiz-question-wrapper');
    const userAnswers: Number[] = [];

    // Create white transition overlay
    const whiteTransition = document.createElement('div');
    whiteTransition.className = 'white-transition';
    document.body.appendChild(whiteTransition);

    // --- 1. Start Quiz Logic with white transition ---
    if (startButton) {
        startButton.addEventListener('click', () => {
            // Trigger white transition
            whiteTransition.classList.add('active');

            // Wait for transition to complete, then change content
            setTimeout(() => {
                if (mainPageContainer) {
                    mainPageContainer.style.display = 'none';
                }
                if (questionsArea) {
                    questionsArea.style.display = 'block';
                }

                // Remove white transition after content change
                setTimeout(() => {
                    whiteTransition.classList.remove('active');
                }, 200); // Small delay to ensure content is visible

            }, 600); // Half of the 1.2s transition duration
        });
    }

    // --- 2. Option Selection Logic ---
    if (questionsArea) {
        questionsArea.addEventListener('click', (event) => {
            if (!event.target) return;
            
            const target = event.target as Element;
            
            // Handle option selection (adjust selector based on your QuizQuestion component)
            if (target.classList.contains('quiz-option') || target.closest('.quiz-option')) {
                const optionElement = target.classList.contains('quiz-option') ? target : target.closest('.quiz-option');
                const questionWrapper = optionElement?.closest('.quiz-question-wrapper');
                
                if (questionWrapper && optionElement) {
                    // Remove selected class from all options in this question
                    const allOptions = questionWrapper.querySelectorAll('.quiz-option');
                    allOptions.forEach(option => option.classList.remove('selected'));
                    
                    // Add selected class to clicked option
                    optionElement.classList.add('selected');
                    
                      // Store the answer
                        const questionIndex = parseInt((questionWrapper as HTMLElement).dataset.questionIndex || '0', 10);
                        const optionIndex = parseInt((optionElement as HTMLElement).dataset.optionIndex || '0', 10);
                        userAnswers[questionIndex] = optionIndex;
                    
                    // Enable the Next button
                    const nextButton = questionWrapper.querySelector('.quiz-next-button') as HTMLButtonElement;
                    if (nextButton) {
                        nextButton.disabled = false;
                        nextButton.style.opacity = '1';
                    }
                }
            }
            
            // Handle Next button click with white transition
            const nextButton = target.closest('.quiz-next-button');
            if (nextButton) {
                const currentQuestionWrapper = nextButton.closest('.quiz-question-wrapper');
                if (!currentQuestionWrapper) return;

                const currentQuestionIndex = parseInt((currentQuestionWrapper as HTMLElement).dataset.questionIndex || '0', 10);
                const nextQuestionIndex = currentQuestionIndex + 1;

                // Trigger white transition
                whiteTransition.classList.add('active');

                // Wait for transition to complete, then change content
                setTimeout(() => {
                    // Hide the current question
                    currentQuestionWrapper.classList.add('hidden');

                    if (nextQuestionIndex < questionWrappers.length) {
                        // Show the next question
                        const nextQuestionWrapper = questionWrappers[nextQuestionIndex];
                        if (nextQuestionWrapper) {
                            nextQuestionWrapper.classList.remove('hidden');
                        }
                    } else {
                        // End of the quiz and
                        console.log('Quiz finished!', userAnswers);
                        let eraIndex = calculateERAScores(userAnswers);
                        let ERA = ERAS[eraIndex];
                        questionsArea.innerHTML = `<h1>Quiz Complete! Thanks for playing.ERA: ${ERA}</h1>`;
                        console.log(ERA);
                    }

                    // Remove white transition after content change
                    setTimeout(() => {
                        whiteTransition.classList.remove('active');
                    }, 200); // Small delay to ensure content is visible

                }, 600); // Half of the 1.2s transition duration
            }
        });
    }
});
</script>  