<nav class="scroll-nav-indicator">
    <div id="mobile-drawer-trigger">
        <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="lucide lucide-chevron-left"><path d="m15 18-6-6 6-6"></path></svg
        >
    </div>
    <ul class="navigation-container">
        <li class="active">
            <a href="#brand-intro" class="scroll-indicator" data-item="Thank you for 5 Years"></a>
        </li>
        <li>
            <a href="#community-stories" class="scroll-indicator" data-item="Community Stories"></a>
        </li>
        <li>
            <a href="#makan-party" class="scroll-indicator" data-item="Makan Party"></a>
        </li>
        <li>
            <a href="#ice-cream-quiz" class="scroll-indicator" data-item="Quiz"></a>
        </li>
        <li>
            <a href="#sgtournament" class="scroll-indicator" data-item="Ultimate SG Icon"></a>
        </li>
        <li>
            <a href="#giveaway" class="scroll-indicator" data-item="Giveaway"></a>
        </li>
        <li>
            <a href="#gallery" class="scroll-indicator" data-item="Gallery"></a>
        </li>
    </ul>
</nav>

<style>
    .scroll-nav-indicator {
        position: fixed;
        top: 50%;
        right: 0;
        padding-right: 1rem;
        transform: translateY(-50%);
        z-index: 10;
    }

    .navigation-container {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        gap: 2rem;
        margin: 0;
        padding: 0;
        list-style: none;
    }

    .navigation-container li {
        position: relative;
    }

    .navigation-container li::before {
        content: "";
        position: absolute;
        top: -1.9rem;
        left: calc(50% - 1px);
        display: block;
        border: 1px dashed white;
        height: 1.5rem;
        width: 0;
    }

    .navigation-container li:first-child::before {
        display: none;
    }

    .navigation-container li.active a {
        background-color: white;
    }

    .navigation-container li.active::before {
        border: 1px solid white;
    }

    .navigation-container a {
        position: relative;
        display: inline-block;
        border: 2px solid white;
        border-radius: 50%;
        width: 1rem;
        height: 1rem;
        background-color: transparent;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .navigation-container a:hover {
        box-shadow: 0 0 0 2px white;
        border: 4px solid white;
        background-color: white;
    }

    .navigation-container a::before {
        content: attr(data-item);
        position: absolute;
        top: -4px;
        border-top-right-radius: 0.5rem;
        border-bottom-left-radius: 0.5rem;
        background-color: white;
        padding: 0.3rem 0.5rem;
        font-size: 0.6rem;
        color: black;
        white-space: nowrap;
        opacity: 0;
        transform-origin: left;
        transition: all 0.3s ease;
    }

    .navigation-container a:hover::before {
        transform: translate(calc(-100% - 1rem), -3px);
        opacity: 1;
    }

    #mobile-drawer-trigger {
        display: none;
    }

    @media only screen and (max-height: 575.98px) and (orientation: landscape) {
        .scroll-nav-indicator {
            display: flex;
            align-items: center;
            justify-content: flex-end;
            height: 100%;
            width: 11rem;
            background-color: hsla(0, 0%, 0%, 0.8);
            transform: translate(100%, -50%);
            transition: all 0.3s ease;
        }

        .scroll-nav-indicator.active {
            transform: translate(0%, -50%);
        }

        #mobile-drawer-trigger {
            display: block;
            position: absolute;
            top: 50%;
            left: -2rem;
            display: flex;
            align-items: center;
            transform: translateY(-50%);
            border-top-left-radius: 1rem;
            border-bottom-left-radius: 1rem;
            background-color: hsla(0, 0%, 0%, 0.8);
            width: 2rem;
            height: 2rem;
            padding-left: 5px;
            color: white;
            cursor: pointer;
        }

        .scroll-nav-indicator svg {
            transition: all 0.4s ease;
        }

        .scroll-nav-indicator.active svg {
            transform: rotate(180deg);
        }

        .navigation-container a::before {
            transform: translate(calc(-100% - 1rem), -2px);
            opacity: 1;
            color: white;
            font-weight: bold;
            background-color: transparent;
        }
    }
</style>

<script>
    const scrollNavIndicator = document.querySelector(".scroll-nav-indicator")!;
    const scrollIndicators = document.querySelectorAll(".scroll-nav-indicator li");
    const scrollIndicatorDots = document.querySelectorAll(".scroll-indicator");
    const allSections = document.querySelectorAll("section");
    const observedSections = [...scrollIndicatorDots].map((dot) => dot.hash);
    const mobileDrawerTrigger = document.querySelector("#mobile-drawer-trigger")!;

    mobileDrawerTrigger.addEventListener("click", () => {
        if (scrollNavIndicator.classList.contains("active")) {
            scrollNavIndicator.classList.remove("active");
        } else {
            scrollNavIndicator.classList.add("active");
        }
    });

    const updateIndicators = (indicatorIndex) => {
        scrollIndicators.forEach((li, j) => {
            li.className = j <= indicatorIndex ? "active" : "";
        });
    };

    scrollIndicatorDots.forEach((indicatorDot, i) => {
        indicatorDot.addEventListener("click", (e) => {
            e.preventDefault();

            updateIndicators(i);

            const topElement = document.querySelector("#brand-intro")!;
            const targetId = indicatorDot.getAttribute("href")!;
            if (targetId) {
                topElement.scrollIntoView({ behavior: "instant" });
                history.pushState(null, "", targetId);

                requestAnimationFrame(() => {
                    const targetElement = document.querySelector(targetId);

                    if (targetElement) {
                        const scrollPadding = parseInt(getComputedStyle(targetElement).scrollPaddingTop, 10) || 0;
                        const targetPosition =
                            targetElement.getBoundingClientRect().top + window.pageYOffset + scrollPadding;

                        window.scrollTo({
                            top: targetPosition,
                            behavior: "instant",
                        });
                    }
                });
            }
        });
    });

    const observer = new IntersectionObserver(
        (entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    const targetID = `#${entry.target.id}`;
                    history.pushState(null, "", targetID);
                    updateIndicators(observedSections.indexOf(targetID));
                }
            });
        },
        { threshold: 0.9 }
    );

    allSections.forEach((section) => {
        observedSections.includes(`#${section.id}`) && observer.observe(section);
    });
</script>
